%% vim:ft=erlang:

%% TEST
?_assertMatch(
  {yaml_parser,
    {file,"${FILENAME}"},
    [],
    <<>>,
    27,
    true,
    [],
    0,
    28,
    3,
    1,
    false,
    2,
    12,
    utf8,
    false,
    undefined,
    _,
    _,
    [],
    {bcoll,root,0,-1,1,1,-1,1,1},
    false,
    false,
    false,
    [{impl_key,false,undefined,undefined,undefined,undefined,undefined}],
    false,
    false,
    _,
    [],
    0,
    16,
    15,
    undefined,
    undefined,
    _,
    false,
    [],
    [
      {yaml_stream_end,2,12},
      {yaml_doc_end,2,12},
      {yaml_collection_end,2,12,block,mapping},
      {yaml_collection_end,2,12,block,mapping},
      {yaml_scalar,2,7,
        {yaml_tag,2,7,{non_specific,"?"}},
        flow,plain,"value"},
      {yaml_mapping_value,2,5},
      {yaml_scalar,2,2,
        {yaml_tag,2,2,{non_specific,"?"}},
        flow,plain,"key"},
      {yaml_mapping_key,2,2},
      {yaml_collection_start,2,2,
        {yaml_tag,2,2,{non_specific,"?"}},
        block,mapping},
      {yaml_mapping_value,1,14},
      {yaml_scalar,1,1,
        {yaml_tag,1,1,{non_specific,"?"}},
        flow,plain,"block mapping"},
      {yaml_mapping_key,1,1},
      {yaml_collection_start,1,1,
        {yaml_tag,1,1,{non_specific,"?"}},
        block,mapping},
      {yaml_doc_start,1,1,{1,2},_},
      {yaml_stream_start,1,1,utf8}
    ]
  },
  yaml_parser:file("${FILENAME}")
)
