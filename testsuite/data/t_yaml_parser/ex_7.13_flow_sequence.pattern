%% vim:ft=erlang:

%% TEST
?_assertMatch(
  {yaml_parser,
    {file,"${FILENAME}"},
    [],
    <<>>,
    32,
    true,
    [],
    0,
    33,
    3,
    1,
    false,
    2,
    16,
    utf8,
    false,
    undefined,
    _,
    _,
    [],
    {bcoll,root,0,-1,1,1,-1,1,1},
    false,
    false,
    false,
    [{impl_key,false,undefined,undefined,undefined,undefined,undefined}],
    false,
    false,
    _,
    [],
    0,
    21,
    20,
    undefined,
    undefined,
    _,
    false,
    [],
    [
      {yaml_stream_end,2,16},
      {yaml_doc_end,2,16},
      {yaml_collection_end,2,16,block,sequence},
      {yaml_collection_end,2,15,flow,sequence},
      {yaml_scalar,2,11,
        {yaml_tag,2,11,{non_specific,"?"}},
        flow,plain,"four"},
      {yaml_sequence_entry,2,11},
      {yaml_scalar,2,4,
        {yaml_tag,2,4,{non_specific,"?"}},
        flow,plain,"three"},
      {yaml_sequence_entry,2,4},
      {yaml_collection_start,2,3,
        {yaml_tag,2,3,{non_specific,"?"}},
        flow,sequence},
      {yaml_sequence_entry,2,1},
      {yaml_collection_end,1,15,flow,sequence},
      {yaml_scalar,1,10,
        {yaml_tag,1,10,{non_specific,"?"}},
        flow,plain,"two"},
      {yaml_sequence_entry,1,10},
      {yaml_scalar,1,5,
        {yaml_tag,1,5,{non_specific,"?"}},
        flow,plain,"one"},
      {yaml_sequence_entry,1,5},
      {yaml_collection_start,1,3,
        {yaml_tag,1,3,{non_specific,"?"}},
        flow,sequence},
      {yaml_sequence_entry,1,1},
      {yaml_collection_start,1,1,
        {yaml_tag,1,1,{non_specific,"?"}},
        block,sequence},
      {yaml_doc_start,1,1,{1,2},_},
      {yaml_stream_start,1,1,utf8}
    ]
  },
  yaml_parser:file("${FILENAME}")
)
