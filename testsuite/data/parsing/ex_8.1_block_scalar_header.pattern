%% vim:ft=erlang:

%% TEST
?_assertMatch(
  {yaml_parser,
    {file,"${FILENAME}"},
    [],
    <<>>,
    132,
    true,
    [],
    0,
    133,
    11,
    1,
    false,
    9,
    8,
    utf8,
    false,
    undefined,
    _,
    _,
    [],
    {bcoll,root,0,-1,1,1,-1,1,1},
    false,
    false,
    false,
    [{impl_key,false,undefined,undefined,undefined,undefined,undefined}],
    false,
    false,
    _,
    [],
    0,
    15,
    14,
    undefined,
    undefined,
    _,
    false,
    [],
    [
      {yaml_stream_end,9,8},
      {yaml_doc_end,9,8},
      {yaml_collection_end,9,8,block,sequence},
      {yaml_scalar,8,3,
        {yaml_tag,8,3,{non_specific,"!"}},
        block,folded," strip"},
      {yaml_sequence_entry,8,1},
      {yaml_scalar,5,3,
        {yaml_tag,5,3,{non_specific,"!"}},
        block,literal,"keep\n\n"},
      {yaml_sequence_entry,5,1},
      {yaml_scalar,3,3,
        {yaml_tag,3,3,{non_specific,"!"}},
        block,folded," folded\n"},
      {yaml_sequence_entry,3,1},
      {yaml_scalar,1,3,
        {yaml_tag,1,3,{non_specific,"!"}},
        block,literal,"literal\n"},
      {yaml_sequence_entry,1,1},
      {yaml_collection_start,1,1,
        {yaml_tag,1,1,{non_specific,"?"}},
        block,sequence},
      {yaml_doc_start,1,1,{1,2},_},
      {yaml_stream_start,1,1,utf8}
    ]
  },
  yaml_parser:file("${FILENAME}")
)
